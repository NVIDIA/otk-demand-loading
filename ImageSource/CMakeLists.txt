#
# Copyright (c) 2022, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

include(BuildConfig)

otk_add_library( ImageSource
  src/CheckerBoardImage.cpp
  src/CoreEXRReader.cpp
  src/EXRReader.cpp
  src/Exception.h
  src/ImageSource.cpp
  src/Stopwatch.h
  src/TextureInfo.cpp
  )
set_property(TARGET ImageSource PROPERTY FOLDER DemandLoading)

add_library(OptiXToolkit::ImageSource ALIAS ImageSource)

target_sources(ImageSource
  PUBLIC 
  FILE_SET HEADERS 
  BASE_DIRS include
  FILES
  include/OptiXToolkit/ImageSource/CheckerBoardImage.h
  include/OptiXToolkit/ImageSource/CoreEXRReader.h
  include/OptiXToolkit/ImageSource/EXRReader.h
  include/OptiXToolkit/ImageSource/ImageHelpers.h
  include/OptiXToolkit/ImageSource/ImageSource.h
  include/OptiXToolkit/ImageSource/TextureInfo.h
)

source_group( "Header Files\\Implementation" FILES
  src/Exception.h
  src/Stopwatch.h
  )

target_compile_definitions( ImageSource PUBLIC
  OPTIX_SAMPLE_USE_CORE_EXR
  OTK_IMF_NAMESPACE=Imf_3_1
  )

if(NOT MSVC)
  # Silence 'ISO C++ prohibits anonymous structs' warning in OpenEXR header.
  target_compile_options( ImageSource PRIVATE -Wno-pedantic )
endif()

target_include_directories( ImageSource
  PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
  PRIVATE
  src
  )

# Bundle OpenEXR libraries to work around export problem.
add_library(OpenEXR_OTK INTERFACE IMPORTED)
target_link_libraries(OpenEXR_OTK INTERFACE OpenEXR::OpenEXR OpenEXR::OpenEXRCore)

target_link_libraries( ImageSource
  PUBLIC
  CUDA::cuda_driver
  PRIVATE
  OpenEXR_OTK
  )

find_package(OpenImageIO QUIET)
if(OpenImageIO_FOUND)
  set(Boost_NO_WARN_NEW_VERSIONS ON)
  find_package(Boost COMPONENTS system filesystem thread REQUIRED)
  target_sources(ImageSource PRIVATE 
    src/OIIOReader.cpp 
    include/OptiXToolkit/ImageSource/OIIOReader.h
  )
  target_link_libraries(ImageSource
    PUBLIC # TODO: make this private
    OpenImageIO::OpenImageIO
    Boost::filesystem
    Boost::thread
  )
else()
  message(WARNING "OpenImageIO not found.  Skipping OIIOReader.")
endif()

# Define OTK_USE_OIIO in Config.h
configure_file( src/Config.h.in include/Config.h @ONLY )

target_include_directories(ImageSource PUBLIC  # public to facilitate unit testing.
  $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>  # for Config.h
  )

set_target_properties(ImageSource PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)

if( BUILD_TESTING )
  add_subdirectory( tests )
endif()
